#include <iostream>

using namespace std;

struct Node {
	int data;
	Node* next;
	Node(int x) {
		this->data = x;
		this->next = nullptr;
	}
};

class Linkedlist {
	Node* head;
public:
	Linkedlist() : head(NULL) {}

	void append(int x) {
		Node* newnode = new Node(x);
		if (head == nullptr) {
			head = newnode;
			return;
		}
		Node* temp = head;
		while (temp->next != NULL) {
			temp = temp->next;
		}
		newnode->next = temp->next;
		temp->next = newnode;
	}

	void search(int x) {
		Node* temp = head;
		int position = 0;
		while (temp != NULL) {
			if (temp->data == x) {
				cout << position << endl;
				return;
			}
			temp = temp->next;
			position++;
		}
		cout << "NO" << endl;
	}

	void reverse() {
		Node* temp = head;
		Node* next = nullptr;
		Node* prev = nullptr;
		while (temp) {
			next = temp->next;
			temp->next = prev;
			prev = temp;
			temp = next;
		}
		head = prev;
	}

	void print() {
		Node* temp = head;
		while (temp != nullptr) {
			cout << temp->data << " ";
			temp = temp->next;
		}
		cout << endl;
	}
};

int main() {
	int n;
	cin >> n;
	Linkedlist list;
	for (int i = 0; i < n; i++) {
		string command;
		cin >> command;
		if (command == "append") {
			int x;
			cin >> x;
			list.append(x);
		}
		if (command == "search") {
			int x;
			cin >> x;
			list.search(x);
		}
		if (command == "reverse") {
			list.reverse();
			list.print();
		}
	}
	return 0;
}
