#include <iostream>
using namespace std;

// Cấu trúc node cho cây nhị phân
struct Node {
    int data; // Giá trị của node 
    Node* left; // Con trỏ đến con trái 
    Node* right; // Con trỏ đến con phải 
    Node(int x) : data(x), left(NULL), right(NULL) {} // Khởi tạo node
};

Node* root = NULL; // Khởi tạo gốc

// Chèn node mới vào cây
void insert(int val) {
    if (!root) {
        root = new Node(val);
        return; // Nếu chưa có gốc thì thêm node làm gốc và trả về 
    }
    Node* curr = root;
    while (true) { // Đặt trong vòng lặp đến khi chèn được node mới 
        if (val < curr->data) { // Nếu giá trị node mới bé hơn node cha thì di chuyển về bên phải
            if (!curr->left) { // Nếu node cha chưa có con phải
                curr->left = new Node(val);
                return; // Gắn node mới vào con phải node cha
            }
            curr = curr->left; // Không thì tiếp tục di chuyển về bên phải
        }
        else { // Nếu giá trị node mới lớn hơn node cha thì di chuyển về bên phải
            if (!curr->right) { // Nếu node cha chưa có con trái
                curr->right = new Node(val);
                return; // Gắn node mới vào con trái node cha
            }
            curr = curr->right; // Không thì tiếp tục di chuyển về bên trái
        }
    }
}

// Xoá node của cây 
void deleteNode(int val) {
    Node* curr = root;
    Node* parent = NULL;
    while (curr && curr->data != val) { // Tìm node có giá trị val 
        parent = curr;
        if (val < curr->data) curr = curr->left;
        else curr = curr->right;
    }
    if (!curr) return; // Nếu không tìm thấy thì trả về
    if (!curr->left && !curr->right) { // Nếu Node cần xoá không có con
        if (!parent) root = NULL;
        if (parent->left == curr) parent->left = nullptr;
        else parent->right = nullptr;
        delete curr; // Thì xoá node và liên kết
        return;
    }
    else if (!curr->left || !curr->right) { // Nếu node cần xoá có 1 con
        Node* child = (curr->left) ? curr->left : curr->right; // Đánh dấu con của node
        if (!parent) root = child;
        else if (parent->left == curr) parent->left = child;
        else parent->right = child;
        delete curr; // Xoá node và đặt lại liên kết
        return;
    }
    else { // Nếu node cần xoá có 2 con
        Node* minNode = curr->right; // Tìm con nhỏ nhất của nhánh bên trái
        Node* minParent = curr; // Tìm cha của con nhỏ nhất
        while (curr->left) {
            minParent = curr;
            minNode = curr->left;
        }
        curr->data = minNode->data; // Sao chép giá trị của con nhỏ nhất với node cần xoá
        if (minParent->left == minNode) minParent->left = minNode->right;
        else minParent->right = minNode->right; // Nối lại nhánh con
        delete minNode;
        return;
    }
}

int main() {
    int arr[] = { 14, 15, 35, 62, 29, 42, 40, 80, 59, 23, 46, 57, 3, 19 };
    for (int num : arr) insert(num);
    return 0;
}


              14
      3                  15
                                  35
                                29         62
                              23         46        80
                            19         40  59
                                          57
